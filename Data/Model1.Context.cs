//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SISTRENT.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SISRENTEntities : DbContext
    {
        public SISRENTEntities()
            : base("name=SISRENTEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Table> Tables { get; set; }
        public virtual DbSet<vwBrand> vwBrands { get; set; }
        public virtual DbSet<vwClass> vwClasses { get; set; }
        public virtual DbSet<vwFilesDescription> vwFilesDescriptions { get; set; }
        public virtual DbSet<vwFuel> vwFuels { get; set; }
        public virtual DbSet<vwModel> vwModels { get; set; }
        public virtual DbSet<vwStatu> vwStatus { get; set; }
        public virtual DbSet<vwTran> vwTrans { get; set; }
        public virtual DbSet<Filter> Filters { get; set; }
        public virtual DbSet<VehiclesExpenss> VehiclesExpensses { get; set; }
        public virtual DbSet<VehiclesMaintenaceInfo> VehiclesMaintenaceInfoes { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Insurence> Insurences { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<vwSpentType> vwSpentTypes { get; set; }
        public virtual DbSet<VehiclesImagen> VehiclesImagens { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<vwVehicle> vwVehicles { get; set; }
        public virtual DbSet<VehiclesPrice> VehiclesPrices { get; set; }
    
        public virtual ObjectResult<spGetVehicleImagens_Result> spGetVehicleImagens(Nullable<int> vehicleId)
        {
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetVehicleImagens_Result>("spGetVehicleImagens", vehicleIdParameter);
        }
    
        public virtual int spMainVehiclesExpensses(Nullable<int> id, Nullable<int> vehicleId, Nullable<int> expenseType, Nullable<System.DateTime> expenseDate, Nullable<decimal> expenseAmount, string expenseNotes)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            var expenseTypeParameter = expenseType.HasValue ?
                new ObjectParameter("ExpenseType", expenseType) :
                new ObjectParameter("ExpenseType", typeof(int));
    
            var expenseDateParameter = expenseDate.HasValue ?
                new ObjectParameter("ExpenseDate", expenseDate) :
                new ObjectParameter("ExpenseDate", typeof(System.DateTime));
    
            var expenseAmountParameter = expenseAmount.HasValue ?
                new ObjectParameter("ExpenseAmount", expenseAmount) :
                new ObjectParameter("ExpenseAmount", typeof(decimal));
    
            var expenseNotesParameter = expenseNotes != null ?
                new ObjectParameter("ExpenseNotes", expenseNotes) :
                new ObjectParameter("ExpenseNotes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMainVehiclesExpensses", idParameter, vehicleIdParameter, expenseTypeParameter, expenseDateParameter, expenseAmountParameter, expenseNotesParameter);
        }
    
        public virtual int spMainVehiclesMaintenaceInfo(Nullable<int> id, Nullable<int> vehicleID, Nullable<int> lastMileageService, Nullable<int> intervalMileageService, Nullable<System.DateTime> lastServiceDate, Nullable<System.DateTime> nextServiceDate, Nullable<System.DateTime> nextInspectionDate, Nullable<System.DateTime> plateExpirationDate, Nullable<System.DateTime> insuranceExpirationDate, string insurancePolicyNumber, Nullable<int> insuranceCode, Nullable<decimal> insuranceAmount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));
    
            var lastMileageServiceParameter = lastMileageService.HasValue ?
                new ObjectParameter("LastMileageService", lastMileageService) :
                new ObjectParameter("LastMileageService", typeof(int));
    
            var intervalMileageServiceParameter = intervalMileageService.HasValue ?
                new ObjectParameter("IntervalMileageService", intervalMileageService) :
                new ObjectParameter("IntervalMileageService", typeof(int));
    
            var lastServiceDateParameter = lastServiceDate.HasValue ?
                new ObjectParameter("LastServiceDate", lastServiceDate) :
                new ObjectParameter("LastServiceDate", typeof(System.DateTime));
    
            var nextServiceDateParameter = nextServiceDate.HasValue ?
                new ObjectParameter("NextServiceDate", nextServiceDate) :
                new ObjectParameter("NextServiceDate", typeof(System.DateTime));
    
            var nextInspectionDateParameter = nextInspectionDate.HasValue ?
                new ObjectParameter("NextInspectionDate", nextInspectionDate) :
                new ObjectParameter("NextInspectionDate", typeof(System.DateTime));
    
            var plateExpirationDateParameter = plateExpirationDate.HasValue ?
                new ObjectParameter("PlateExpirationDate", plateExpirationDate) :
                new ObjectParameter("PlateExpirationDate", typeof(System.DateTime));
    
            var insuranceExpirationDateParameter = insuranceExpirationDate.HasValue ?
                new ObjectParameter("InsuranceExpirationDate", insuranceExpirationDate) :
                new ObjectParameter("InsuranceExpirationDate", typeof(System.DateTime));
    
            var insurancePolicyNumberParameter = insurancePolicyNumber != null ?
                new ObjectParameter("InsurancePolicyNumber", insurancePolicyNumber) :
                new ObjectParameter("InsurancePolicyNumber", typeof(string));
    
            var insuranceCodeParameter = insuranceCode.HasValue ?
                new ObjectParameter("InsuranceCode", insuranceCode) :
                new ObjectParameter("InsuranceCode", typeof(int));
    
            var insuranceAmountParameter = insuranceAmount.HasValue ?
                new ObjectParameter("InsuranceAmount", insuranceAmount) :
                new ObjectParameter("InsuranceAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMainVehiclesMaintenaceInfo", idParameter, vehicleIDParameter, lastMileageServiceParameter, intervalMileageServiceParameter, lastServiceDateParameter, nextServiceDateParameter, nextInspectionDateParameter, plateExpirationDateParameter, insuranceExpirationDateParameter, insurancePolicyNumberParameter, insuranceCodeParameter, insuranceAmountParameter);
        }
    
        public virtual int spMainVehicles(Nullable<int> vEHICLEID, string pLATENUMBER, string cHASSIS, Nullable<int> cLASS, string dESCRIPTION, Nullable<int> bRAND, Nullable<int> mODEL, string cOLOR, Nullable<int> tRANSMISSION, Nullable<int> fUEL, string mANUFACTUREYEAR, Nullable<int> sTATUS, Nullable<System.DateTime> aCQUISITIONDATE, Nullable<int> oWNER, string mILEAGE, byte[] iMAGEN, Nullable<decimal> pRICE1, Nullable<decimal> pRICE2, Nullable<decimal> pRICE3, Nullable<decimal> pRICE4, Nullable<decimal> pRICE5, Nullable<decimal> pRICE1A, Nullable<decimal> pRICE2A, Nullable<decimal> pRICE3A, Nullable<decimal> pRICE4A, Nullable<decimal> pRICE5A, string cREATEBY, Nullable<System.DateTime> cREATEDATE, string mODIFYBY, Nullable<System.DateTime> mODIFYDATE)
        {
            var vEHICLEIDParameter = vEHICLEID.HasValue ?
                new ObjectParameter("VEHICLEID", vEHICLEID) :
                new ObjectParameter("VEHICLEID", typeof(int));
    
            var pLATENUMBERParameter = pLATENUMBER != null ?
                new ObjectParameter("PLATENUMBER", pLATENUMBER) :
                new ObjectParameter("PLATENUMBER", typeof(string));
    
            var cHASSISParameter = cHASSIS != null ?
                new ObjectParameter("CHASSIS", cHASSIS) :
                new ObjectParameter("CHASSIS", typeof(string));
    
            var cLASSParameter = cLASS.HasValue ?
                new ObjectParameter("CLASS", cLASS) :
                new ObjectParameter("CLASS", typeof(int));
    
            var dESCRIPTIONParameter = dESCRIPTION != null ?
                new ObjectParameter("DESCRIPTION", dESCRIPTION) :
                new ObjectParameter("DESCRIPTION", typeof(string));
    
            var bRANDParameter = bRAND.HasValue ?
                new ObjectParameter("BRAND", bRAND) :
                new ObjectParameter("BRAND", typeof(int));
    
            var mODELParameter = mODEL.HasValue ?
                new ObjectParameter("MODEL", mODEL) :
                new ObjectParameter("MODEL", typeof(int));
    
            var cOLORParameter = cOLOR != null ?
                new ObjectParameter("COLOR", cOLOR) :
                new ObjectParameter("COLOR", typeof(string));
    
            var tRANSMISSIONParameter = tRANSMISSION.HasValue ?
                new ObjectParameter("TRANSMISSION", tRANSMISSION) :
                new ObjectParameter("TRANSMISSION", typeof(int));
    
            var fUELParameter = fUEL.HasValue ?
                new ObjectParameter("FUEL", fUEL) :
                new ObjectParameter("FUEL", typeof(int));
    
            var mANUFACTUREYEARParameter = mANUFACTUREYEAR != null ?
                new ObjectParameter("MANUFACTUREYEAR", mANUFACTUREYEAR) :
                new ObjectParameter("MANUFACTUREYEAR", typeof(string));
    
            var sTATUSParameter = sTATUS.HasValue ?
                new ObjectParameter("STATUS", sTATUS) :
                new ObjectParameter("STATUS", typeof(int));
    
            var aCQUISITIONDATEParameter = aCQUISITIONDATE.HasValue ?
                new ObjectParameter("ACQUISITIONDATE", aCQUISITIONDATE) :
                new ObjectParameter("ACQUISITIONDATE", typeof(System.DateTime));
    
            var oWNERParameter = oWNER.HasValue ?
                new ObjectParameter("OWNER", oWNER) :
                new ObjectParameter("OWNER", typeof(int));
    
            var mILEAGEParameter = mILEAGE != null ?
                new ObjectParameter("MILEAGE", mILEAGE) :
                new ObjectParameter("MILEAGE", typeof(string));
    
            var iMAGENParameter = iMAGEN != null ?
                new ObjectParameter("IMAGEN", iMAGEN) :
                new ObjectParameter("IMAGEN", typeof(byte[]));
    
            var pRICE1Parameter = pRICE1.HasValue ?
                new ObjectParameter("PRICE1", pRICE1) :
                new ObjectParameter("PRICE1", typeof(decimal));
    
            var pRICE2Parameter = pRICE2.HasValue ?
                new ObjectParameter("PRICE2", pRICE2) :
                new ObjectParameter("PRICE2", typeof(decimal));
    
            var pRICE3Parameter = pRICE3.HasValue ?
                new ObjectParameter("PRICE3", pRICE3) :
                new ObjectParameter("PRICE3", typeof(decimal));
    
            var pRICE4Parameter = pRICE4.HasValue ?
                new ObjectParameter("PRICE4", pRICE4) :
                new ObjectParameter("PRICE4", typeof(decimal));
    
            var pRICE5Parameter = pRICE5.HasValue ?
                new ObjectParameter("PRICE5", pRICE5) :
                new ObjectParameter("PRICE5", typeof(decimal));
    
            var pRICE1AParameter = pRICE1A.HasValue ?
                new ObjectParameter("PRICE1A", pRICE1A) :
                new ObjectParameter("PRICE1A", typeof(decimal));
    
            var pRICE2AParameter = pRICE2A.HasValue ?
                new ObjectParameter("PRICE2A", pRICE2A) :
                new ObjectParameter("PRICE2A", typeof(decimal));
    
            var pRICE3AParameter = pRICE3A.HasValue ?
                new ObjectParameter("PRICE3A", pRICE3A) :
                new ObjectParameter("PRICE3A", typeof(decimal));
    
            var pRICE4AParameter = pRICE4A.HasValue ?
                new ObjectParameter("PRICE4A", pRICE4A) :
                new ObjectParameter("PRICE4A", typeof(decimal));
    
            var pRICE5AParameter = pRICE5A.HasValue ?
                new ObjectParameter("PRICE5A", pRICE5A) :
                new ObjectParameter("PRICE5A", typeof(decimal));
    
            var cREATEBYParameter = cREATEBY != null ?
                new ObjectParameter("CREATEBY", cREATEBY) :
                new ObjectParameter("CREATEBY", typeof(string));
    
            var cREATEDATEParameter = cREATEDATE.HasValue ?
                new ObjectParameter("CREATEDATE", cREATEDATE) :
                new ObjectParameter("CREATEDATE", typeof(System.DateTime));
    
            var mODIFYBYParameter = mODIFYBY != null ?
                new ObjectParameter("MODIFYBY", mODIFYBY) :
                new ObjectParameter("MODIFYBY", typeof(string));
    
            var mODIFYDATEParameter = mODIFYDATE.HasValue ?
                new ObjectParameter("MODIFYDATE", mODIFYDATE) :
                new ObjectParameter("MODIFYDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMainVehicles", vEHICLEIDParameter, pLATENUMBERParameter, cHASSISParameter, cLASSParameter, dESCRIPTIONParameter, bRANDParameter, mODELParameter, cOLORParameter, tRANSMISSIONParameter, fUELParameter, mANUFACTUREYEARParameter, sTATUSParameter, aCQUISITIONDATEParameter, oWNERParameter, mILEAGEParameter, iMAGENParameter, pRICE1Parameter, pRICE2Parameter, pRICE3Parameter, pRICE4Parameter, pRICE5Parameter, pRICE1AParameter, pRICE2AParameter, pRICE3AParameter, pRICE4AParameter, pRICE5AParameter, cREATEBYParameter, cREATEDATEParameter, mODIFYBYParameter, mODIFYDATEParameter);
        }
    
        public virtual int spMainVehiclesImagens(Nullable<int> imageId, Nullable<int> vehicleId, Nullable<bool> defaultImage, byte[] picture)
        {
            var imageIdParameter = imageId.HasValue ?
                new ObjectParameter("ImageId", imageId) :
                new ObjectParameter("ImageId", typeof(int));
    
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(int));
    
            var defaultImageParameter = defaultImage.HasValue ?
                new ObjectParameter("DefaultImage", defaultImage) :
                new ObjectParameter("DefaultImage", typeof(bool));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("Picture", picture) :
                new ObjectParameter("Picture", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMainVehiclesImagens", imageIdParameter, vehicleIdParameter, defaultImageParameter, pictureParameter);
        }
    }
}
